# task-1
第四章
{

 "cells": [

  {

   "cell_type": "code",

   "execution_count": 1,

   "metadata": {},

   "outputs": [],

   "source": [

    "import numpy as np\n",

    "np.random.seed(12345)\n",

    "import matplotlib.pyplot as plt\n",

    "plt.rc('figure', figsize=(10, 6))\n",

    "np.set_printoptions(precision=4, suppress=True)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 2,

   "metadata": {},

   "outputs": [],

   "source": [

    "import numpy as np\n",

    "my_arr = np.arange(1000000)\n",

    "my_list = list(range(1000000))"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 3,

   "metadata": {},

   "outputs": [

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "Wall time: 29.9 ms\n",

      "Wall time: 994 ms\n"

     ]

    }

   ],

   "source": [

    "%time for _ in range(10): my_arr2 = my_arr * 2\n",

    "%time for _ in range(10): my_list2 = [x * 2 for x in my_list]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 4,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[-0.2047,  0.4789, -0.5194],\n",

       "       [-0.5557,  1.9658,  1.3934]])"

      ]

     },

     "execution_count": 4,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "import numpy as np\n",

    "data = np.random.randn(2, 3)\n",

    "data"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 5,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[-0.4094,  0.9579, -1.0389],\n",

       "       [-1.1115,  3.9316,  2.7868]])"

      ]

     },

     "execution_count": 5,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data * 10\n",

    "data + data"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 6,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "dtype('float64')"

      ]

     },

     "execution_count": 6,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data.shape\n",

    "data.dtype"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 7,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([6. , 7.5, 8. , 0. , 1. ])"

      ]

     },

     "execution_count": 7,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data1 = [6, 7.5, 8, 0, 1]\n",

    "arr1 = np.array(data1)\n",

    "arr1"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 8,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[1, 2, 3, 4],\n",

       "       [5, 6, 7, 8]])"

      ]

     },

     "execution_count": 8,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]\n",

    "arr2 = np.array(data2)\n",

    "arr2"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 9,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "(2, 4)"

      ]

     },

     "execution_count": 9,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2.ndim\n",

    "arr2.shape"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 10,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "dtype('int32')"

      ]

     },

     "execution_count": 10,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr1.dtype\n",

    "arr2.dtype"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 11,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[[8.4051e-312, 3.1620e-322],\n",

       "        [0.0000e+000, 0.0000e+000],\n",

       "        [0.0000e+000, 1.4773e+185]],\n",

       "\n",

       "       [[1.7036e+160, 2.2524e+184],\n",

       "        [9.2052e+169, 9.3222e+164],\n",

       "        [1.5623e+185, 1.5221e-051]]])"

      ]

     },

     "execution_count": 11,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "np.zeros(10)\n",

    "np.zeros((3, 6))\n",

    "np.empty((2, 3, 2))"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 12,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])"

      ]

     },

     "execution_count": 12,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "np.arange(15)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 13,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "dtype('int32')"

      ]

     },

     "execution_count": 13,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr1 = np.array([1, 2, 3], dtype=np.float64)\n",

    "arr2 = np.array([1, 2, 3], dtype=np.int32)\n",

    "arr1.dtype\n",

    "arr2.dtype"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 14,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "dtype('float64')"

      ]

     },

     "execution_count": 14,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.array([1, 2, 3, 4, 5])\n",

    "arr.dtype\n",

    "float_arr = arr.astype(np.float64)\n",

    "float_arr.dtype"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 15,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 3, -1, -2,  0, 12, 10])"

      ]

     },

     "execution_count": 15,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])\n",

    "arr\n",

    "arr.astype(np.int32)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 16,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 1.25, -9.6 , 42.  ])"

      ]

     },

     "execution_count": 16,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "numeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.string_)\n",

    "numeric_strings.astype(float)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 17,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])"

      ]

     },

     "execution_count": 17,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "int_array = np.arange(10)\n",

    "calibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64)\n",

    "int_array.astype(calibers.dtype)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 18,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([         0, 1075314688,          0, 1075707904,          0,\n",

       "       1075838976,          0, 1072693248], dtype=uint32)"

      ]

     },

     "execution_count": 18,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "empty_uint32 = np.empty(8, dtype='u4')\n",

    "empty_uint32"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 19,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[0., 0., 0.],\n",

       "       [0., 0., 0.]])"

      ]

     },

     "execution_count": 19,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.array([[1., 2., 3.], [4., 5., 6.]])\n",

    "arr\n",

    "arr * arr\n",

    "arr - arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 20,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[1.    , 1.4142, 1.7321],\n",

       "       [2.    , 2.2361, 2.4495]])"

      ]

     },

     "execution_count": 20,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "1 / arr\n",

    "arr ** 0.5"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 21,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[False,  True, False],\n",

       "       [ True, False,  True]])"

      ]

     },

     "execution_count": 21,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2 = np.array([[0., 4., 1.], [7., 2., 12.]])\n",

    "arr2\n",

    "arr2 > arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 22,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])"

      ]

     },

     "execution_count": 22,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.arange(10)\n",

    "arr\n",

    "arr[5]\n",

    "arr[5:8]\n",

    "arr[5:8] = 12\n",

    "arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 23,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([12, 12, 12])"

      ]

     },

     "execution_count": 23,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr_slice = arr[5:8]\n",

    "arr_slice"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 24,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([    0,     1,     2,     3,     4,    12, 12345,    12,     8,\n",

       "           9])"

      ]

     },

     "execution_count": 24,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr_slice[1] = 12345\n",

    "arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 25,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])"

      ]

     },

     "execution_count": 25,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr_slice[:] = 64\n",

    "arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 26,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([7, 8, 9])"

      ]

     },

     "execution_count": 26,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",

    "arr2d[2]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 27,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "3"

      ]

     },

     "execution_count": 27,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d[0][2]\n",

    "arr2d[0, 2]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 28,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[[ 1,  2,  3],\n",

       "        [ 4,  5,  6]],\n",

       "\n",

       "       [[ 7,  8,  9],\n",

       "        [10, 11, 12]]])"

      ]

     },

     "execution_count": 28,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n",

    "arr3d"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 29,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[1, 2, 3],\n",

       "       [4, 5, 6]])"

      ]

     },

     "execution_count": 29,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr3d[0]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 30,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[[ 1,  2,  3],\n",

       "        [ 4,  5,  6]],\n",

       "\n",

       "       [[ 7,  8,  9],\n",

       "        [10, 11, 12]]])"

      ]

     },

     "execution_count": 30,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "old_values = arr3d[0].copy()\n",

    "arr3d[0] = 42\n",

    "arr3d\n",

    "arr3d[0] = old_values\n",

    "arr3d"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 31,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([7, 8, 9])"

      ]

     },

     "execution_count": 31,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr3d[1, 0]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 32,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([7, 8, 9])"

      ]

     },

     "execution_count": 32,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "x = arr3d[1]\n",

    "x\n",

    "x[0]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 33,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 1,  2,  3,  4, 64])"

      ]

     },

     "execution_count": 33,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr\n",

    "arr[1:6]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 34,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[1, 2, 3],\n",

       "       [4, 5, 6]])"

      ]

     },

     "execution_count": 34,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d\n",

    "arr2d[:2]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 35,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[2, 3],\n",

       "       [5, 6]])"

      ]

     },

     "execution_count": 35,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d[:2, 1:]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 36,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([4, 5])"

      ]

     },

     "execution_count": 36,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d[1, :2]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 37,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([3, 6])"

      ]

     },

     "execution_count": 37,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d[:2, 2]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 38,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[1],\n",

       "       [4],\n",

       "       [7]])"

      ]

     },

     "execution_count": 38,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d[:, :1]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 39,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[1, 0, 0],\n",

       "       [4, 0, 0],\n",

       "       [7, 8, 9]])"

      ]

     },

     "execution_count": 39,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d[:2, 1:] = 0\n",

    "arr2d"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 40,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 0.0929,  0.2817,  0.769 ,  1.2464],\n",

       "       [ 1.0072, -1.2962,  0.275 ,  0.2289],\n",

       "       [ 1.3529,  0.8864, -2.0016, -0.3718],\n",

       "       [ 1.669 , -0.4386, -0.5397,  0.477 ],\n",

       "       [ 3.2489, -1.0212, -0.5771,  0.1241],\n",

       "       [ 0.3026,  0.5238,  0.0009,  1.3438],\n",

       "       [-0.7135, -0.8312, -2.3702, -1.8608]])"

      ]

     },

     "execution_count": 40,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\n",

    "data = np.random.randn(7, 4)\n",

    "names\n",

    "data"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 41,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ True, False, False,  True, False, False, False])"

      ]

     },

     "execution_count": 41,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "names == 'Bob'"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 42,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 0.0929,  0.2817,  0.769 ,  1.2464],\n",

       "       [ 1.669 , -0.4386, -0.5397,  0.477 ]])"

      ]

     },

     "execution_count": 42,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data[names == 'Bob']"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 43,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([1.2464, 0.477 ])"

      ]

     },

     "execution_count": 43,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data[names == 'Bob', 2:]\n",

    "data[names == 'Bob', 3]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 44,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 1.0072, -1.2962,  0.275 ,  0.2289],\n",

       "       [ 1.3529,  0.8864, -2.0016, -0.3718],\n",

       "       [ 3.2489, -1.0212, -0.5771,  0.1241],\n",

       "       [ 0.3026,  0.5238,  0.0009,  1.3438],\n",

       "       [-0.7135, -0.8312, -2.3702, -1.8608]])"

      ]

     },

     "execution_count": 44,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "names != 'Bob'\n",

    "data[~(names == 'Bob')]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 45,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 1.0072, -1.2962,  0.275 ,  0.2289],\n",

       "       [ 1.3529,  0.8864, -2.0016, -0.3718],\n",

       "       [ 3.2489, -1.0212, -0.5771,  0.1241],\n",

       "       [ 0.3026,  0.5238,  0.0009,  1.3438],\n",

       "       [-0.7135, -0.8312, -2.3702, -1.8608]])"

      ]

     },

     "execution_count": 45,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "cond = names == 'Bob'\n",

    "data[~cond]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 46,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 0.0929,  0.2817,  0.769 ,  1.2464],\n",

       "       [ 1.3529,  0.8864, -2.0016, -0.3718],\n",

       "       [ 1.669 , -0.4386, -0.5397,  0.477 ],\n",

       "       [ 3.2489, -1.0212, -0.5771,  0.1241]])"

      ]

     },

     "execution_count": 46,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "mask = (names == 'Bob') | (names == 'Will')\n",

    "mask\n",

    "data[mask]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 47,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[0.0929, 0.2817, 0.769 , 1.2464],\n",

       "       [1.0072, 0.    , 0.275 , 0.2289],\n",

       "       [1.3529, 0.8864, 0.    , 0.    ],\n",

       "       [1.669 , 0.    , 0.    , 0.477 ],\n",

       "       [3.2489, 0.    , 0.    , 0.1241],\n",

       "       [0.3026, 0.5238, 0.0009, 1.3438],\n",

       "       [0.    , 0.    , 0.    , 0.    ]])"

      ]

     },

     "execution_count": 47,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data[data < 0] = 0\n",

    "data"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 48,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[7.    , 7.    , 7.    , 7.    ],\n",

       "       [1.0072, 0.    , 0.275 , 0.2289],\n",

       "       [7.    , 7.    , 7.    , 7.    ],\n",

       "       [7.    , 7.    , 7.    , 7.    ],\n",

       "       [7.    , 7.    , 7.    , 7.    ],\n",

       "       [0.3026, 0.5238, 0.0009, 1.3438],\n",

       "       [0.    , 0.    , 0.    , 0.    ]])"

      ]

     },

     "execution_count": 48,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data[names != 'Joe'] = 7\n",

    "data"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 49,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[0., 0., 0., 0.],\n",

       "       [1., 1., 1., 1.],\n",

       "       [2., 2., 2., 2.],\n",

       "       [3., 3., 3., 3.],\n",

       "       [4., 4., 4., 4.],\n",

       "       [5., 5., 5., 5.],\n",

       "       [6., 6., 6., 6.],\n",

       "       [7., 7., 7., 7.]])"

      ]

     },

     "execution_count": 49,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.empty((8, 4))\n",

    "for i in range(8):\n",

    "    arr[i] = i\n",

    "arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 50,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[4., 4., 4., 4.],\n",

       "       [3., 3., 3., 3.],\n",

       "       [0., 0., 0., 0.],\n",

       "       [6., 6., 6., 6.]])"

      ]

     },

     "execution_count": 50,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr[[4, 3, 0, 6]]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 51,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[5., 5., 5., 5.],\n",

       "       [3., 3., 3., 3.],\n",

       "       [1., 1., 1., 1.]])"

      ]

     },

     "execution_count": 51,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr[[-3, -5, -7]]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 52,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 4, 23, 29, 10])"

      ]

     },

     "execution_count": 52,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.arange(32).reshape((8, 4))\n",

    "arr\n",

    "arr[[1, 5, 7, 2], [0, 3, 1, 2]]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 53,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 4,  7,  5,  6],\n",

       "       [20, 23, 21, 22],\n",

       "       [28, 31, 29, 30],\n",

       "       [ 8, 11,  9, 10]])"

      ]

     },

     "execution_count": 53,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr[[1, 5, 7, 2]][:, [0, 3, 1, 2]]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 54,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 0,  5, 10],\n",

       "       [ 1,  6, 11],\n",

       "       [ 2,  7, 12],\n",

       "       [ 3,  8, 13],\n",

       "       [ 4,  9, 14]])"

      ]

     },

     "execution_count": 54,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.arange(15).reshape((3, 5))\n",

    "arr\n",

    "arr.T"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 55,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 9.2291,  0.9394,  4.948 ],\n",

       "       [ 0.9394,  3.7662, -1.3622],\n",

       "       [ 4.948 , -1.3622,  4.3437]])"

      ]

     },

     "execution_count": 55,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.random.randn(6, 3)\n",

    "arr\n",

    "np.dot(arr.T, arr)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 56,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[[ 0,  1,  2,  3],\n",

       "        [ 8,  9, 10, 11]],\n",

       "\n",

       "       [[ 4,  5,  6,  7],\n",

       "        [12, 13, 14, 15]]])"

      ]

     },

     "execution_count": 56,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.arange(16).reshape((2, 2, 4))\n",

    "arr\n",

    "arr.transpose((1, 0, 2))"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 57,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[[ 0,  4],\n",

       "        [ 1,  5],\n",

       "        [ 2,  6],\n",

       "        [ 3,  7]],\n",

       "\n",

       "       [[ 8, 12],\n",

       "        [ 9, 13],\n",

       "        [10, 14],\n",

       "        [11, 15]]])"

      ]

     },

     "execution_count": 57,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr\n",

    "arr.swapaxes(1, 2)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 58,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([   1.    ,    2.7183,    7.3891,   20.0855,   54.5982,  148.4132,\n",

       "        403.4288, 1096.6332, 2980.958 , 8103.0839])"

      ]

     },

     "execution_count": 58,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.arange(10)\n",

    "arr\n",

    "np.sqrt(arr)\n",

    "np.exp(arr)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 59,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 0.8626,  1.0048,  1.3272,  0.6702,  0.853 ,  0.0222,  0.7584,\n",

       "       -0.6605])"

      ]

     },

     "execution_count": 59,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "x = np.random.randn(8)\n",

    "y = np.random.randn(8)\n",

    "x\n",

    "y\n",

    "np.maximum(x, y)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 60,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([-3., -6., -6.,  5.,  3.,  3.,  5.])"

      ]

     },

     "execution_count": 60,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.random.randn(7) * 5\n",

    "arr\n",

    "remainder, whole_part = np.modf(arr)\n",

    "remainder\n",

    "whole_part"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 61,

   "metadata": {},

   "outputs": [

    {

     "name": "stderr",

     "output_type": "stream",

     "text": [

      "F:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:2: RuntimeWarning: invalid value encountered in sqrt\n",

      "  \n"

     ]

    },

    {

     "data": {

  
