# task-1
第四章
{

 "cells": [

  {

   "cell_type": "code",

   "execution_count": 1,

   "metadata": {},

   "outputs": [],

   "source": [

    "import numpy as np\n",

    "np.random.seed(12345)\n",

    "import matplotlib.pyplot as plt\n",

    "plt.rc('figure', figsize=(10, 6))\n",

    "np.set_printoptions(precision=4, suppress=True)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 2,

   "metadata": {},

   "outputs": [],

   "source": [

    "import numpy as np\n",

    "my_arr = np.arange(1000000)\n",

    "my_list = list(range(1000000))"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 3,

   "metadata": {},

   "outputs": [

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "Wall time: 29.9 ms\n",

      "Wall time: 994 ms\n"

     ]

    }

   ],

   "source": [

    "%time for _ in range(10): my_arr2 = my_arr * 2\n",

    "%time for _ in range(10): my_list2 = [x * 2 for x in my_list]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 4,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[-0.2047,  0.4789, -0.5194],\n",

       "       [-0.5557,  1.9658,  1.3934]])"

      ]

     },

     "execution_count": 4,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "import numpy as np\n",

    "data = np.random.randn(2, 3)\n",

    "data"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 5,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[-0.4094,  0.9579, -1.0389],\n",

       "       [-1.1115,  3.9316,  2.7868]])"

      ]

     },

     "execution_count": 5,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data * 10\n",

    "data + data"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 6,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "dtype('float64')"

      ]

     },

     "execution_count": 6,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data.shape\n",

    "data.dtype"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 7,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([6. , 7.5, 8. , 0. , 1. ])"

      ]

     },

     "execution_count": 7,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data1 = [6, 7.5, 8, 0, 1]\n",

    "arr1 = np.array(data1)\n",

    "arr1"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 8,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[1, 2, 3, 4],\n",

       "       [5, 6, 7, 8]])"

      ]

     },

     "execution_count": 8,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]\n",

    "arr2 = np.array(data2)\n",

    "arr2"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 9,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "(2, 4)"

      ]

     },

     "execution_count": 9,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2.ndim\n",

    "arr2.shape"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 10,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "dtype('int32')"

      ]

     },

     "execution_count": 10,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr1.dtype\n",

    "arr2.dtype"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 11,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[[8.4051e-312, 3.1620e-322],\n",

       "        [0.0000e+000, 0.0000e+000],\n",

       "        [0.0000e+000, 1.4773e+185]],\n",

       "\n",

       "       [[1.7036e+160, 2.2524e+184],\n",

       "        [9.2052e+169, 9.3222e+164],\n",

       "        [1.5623e+185, 1.5221e-051]]])"

      ]

     },

     "execution_count": 11,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "np.zeros(10)\n",

    "np.zeros((3, 6))\n",

    "np.empty((2, 3, 2))"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 12,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])"

      ]

     },

     "execution_count": 12,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "np.arange(15)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 13,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "dtype('int32')"

      ]

     },

     "execution_count": 13,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr1 = np.array([1, 2, 3], dtype=np.float64)\n",

    "arr2 = np.array([1, 2, 3], dtype=np.int32)\n",

    "arr1.dtype\n",

    "arr2.dtype"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 14,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "dtype('float64')"

      ]

     },

     "execution_count": 14,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.array([1, 2, 3, 4, 5])\n",

    "arr.dtype\n",

    "float_arr = arr.astype(np.float64)\n",

    "float_arr.dtype"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 15,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 3, -1, -2,  0, 12, 10])"

      ]

     },

     "execution_count": 15,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])\n",

    "arr\n",

    "arr.astype(np.int32)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 16,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 1.25, -9.6 , 42.  ])"

      ]

     },

     "execution_count": 16,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "numeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.string_)\n",

    "numeric_strings.astype(float)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 17,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])"

      ]

     },

     "execution_count": 17,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "int_array = np.arange(10)\n",

    "calibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64)\n",

    "int_array.astype(calibers.dtype)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 18,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([         0, 1075314688,          0, 1075707904,          0,\n",

       "       1075838976,          0, 1072693248], dtype=uint32)"

      ]

     },

     "execution_count": 18,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "empty_uint32 = np.empty(8, dtype='u4')\n",

    "empty_uint32"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 19,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[0., 0., 0.],\n",

       "       [0., 0., 0.]])"

      ]

     },

     "execution_count": 19,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.array([[1., 2., 3.], [4., 5., 6.]])\n",

    "arr\n",

    "arr * arr\n",

    "arr - arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 20,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[1.    , 1.4142, 1.7321],\n",

       "       [2.    , 2.2361, 2.4495]])"

      ]

     },

     "execution_count": 20,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "1 / arr\n",

    "arr ** 0.5"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 21,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[False,  True, False],\n",

       "       [ True, False,  True]])"

      ]

     },

     "execution_count": 21,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2 = np.array([[0., 4., 1.], [7., 2., 12.]])\n",

    "arr2\n",

    "arr2 > arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 22,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])"

      ]

     },

     "execution_count": 22,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.arange(10)\n",

    "arr\n",

    "arr[5]\n",

    "arr[5:8]\n",

    "arr[5:8] = 12\n",

    "arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 23,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([12, 12, 12])"

      ]

     },

     "execution_count": 23,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr_slice = arr[5:8]\n",

    "arr_slice"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 24,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([    0,     1,     2,     3,     4,    12, 12345,    12,     8,\n",

       "           9])"

      ]

     },

     "execution_count": 24,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr_slice[1] = 12345\n",

    "arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 25,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])"

      ]

     },

     "execution_count": 25,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr_slice[:] = 64\n",

    "arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 26,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([7, 8, 9])"

      ]

     },

     "execution_count": 26,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",

    "arr2d[2]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 27,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "3"

      ]

     },

     "execution_count": 27,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d[0][2]\n",

    "arr2d[0, 2]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 28,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[[ 1,  2,  3],\n",

       "        [ 4,  5,  6]],\n",

       "\n",

       "       [[ 7,  8,  9],\n",

       "        [10, 11, 12]]])"

      ]

     },

     "execution_count": 28,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n",

    "arr3d"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 29,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[1, 2, 3],\n",

       "       [4, 5, 6]])"

      ]

     },

     "execution_count": 29,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr3d[0]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 30,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[[ 1,  2,  3],\n",

       "        [ 4,  5,  6]],\n",

       "\n",

       "       [[ 7,  8,  9],\n",

       "        [10, 11, 12]]])"

      ]

     },

     "execution_count": 30,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "old_values = arr3d[0].copy()\n",

    "arr3d[0] = 42\n",

    "arr3d\n",

    "arr3d[0] = old_values\n",

    "arr3d"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 31,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([7, 8, 9])"

      ]

     },

     "execution_count": 31,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr3d[1, 0]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 32,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([7, 8, 9])"

      ]

     },

     "execution_count": 32,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "x = arr3d[1]\n",

    "x\n",

    "x[0]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 33,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 1,  2,  3,  4, 64])"

      ]

     },

     "execution_count": 33,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr\n",

    "arr[1:6]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 34,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[1, 2, 3],\n",

       "       [4, 5, 6]])"

      ]

     },

     "execution_count": 34,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d\n",

    "arr2d[:2]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 35,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[2, 3],\n",

       "       [5, 6]])"

      ]

     },

     "execution_count": 35,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d[:2, 1:]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 36,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([4, 5])"

      ]

     },

     "execution_count": 36,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d[1, :2]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 37,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([3, 6])"

      ]

     },

     "execution_count": 37,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d[:2, 2]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 38,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[1],\n",

       "       [4],\n",

       "       [7]])"

      ]

     },

     "execution_count": 38,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d[:, :1]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 39,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[1, 0, 0],\n",

       "       [4, 0, 0],\n",

       "       [7, 8, 9]])"

      ]

     },

     "execution_count": 39,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr2d[:2, 1:] = 0\n",

    "arr2d"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 40,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 0.0929,  0.2817,  0.769 ,  1.2464],\n",

       "       [ 1.0072, -1.2962,  0.275 ,  0.2289],\n",

       "       [ 1.3529,  0.8864, -2.0016, -0.3718],\n",

       "       [ 1.669 , -0.4386, -0.5397,  0.477 ],\n",

       "       [ 3.2489, -1.0212, -0.5771,  0.1241],\n",

       "       [ 0.3026,  0.5238,  0.0009,  1.3438],\n",

       "       [-0.7135, -0.8312, -2.3702, -1.8608]])"

      ]

     },

     "execution_count": 40,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\n",

    "data = np.random.randn(7, 4)\n",

    "names\n",

    "data"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 41,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ True, False, False,  True, False, False, False])"

      ]

     },

     "execution_count": 41,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "names == 'Bob'"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 42,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 0.0929,  0.2817,  0.769 ,  1.2464],\n",

       "       [ 1.669 , -0.4386, -0.5397,  0.477 ]])"

      ]

     },

     "execution_count": 42,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data[names == 'Bob']"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 43,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([1.2464, 0.477 ])"

      ]

     },

     "execution_count": 43,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data[names == 'Bob', 2:]\n",

    "data[names == 'Bob', 3]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 44,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 1.0072, -1.2962,  0.275 ,  0.2289],\n",

       "       [ 1.3529,  0.8864, -2.0016, -0.3718],\n",

       "       [ 3.2489, -1.0212, -0.5771,  0.1241],\n",

       "       [ 0.3026,  0.5238,  0.0009,  1.3438],\n",

       "       [-0.7135, -0.8312, -2.3702, -1.8608]])"

      ]

     },

     "execution_count": 44,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "names != 'Bob'\n",

    "data[~(names == 'Bob')]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 45,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 1.0072, -1.2962,  0.275 ,  0.2289],\n",

       "       [ 1.3529,  0.8864, -2.0016, -0.3718],\n",

       "       [ 3.2489, -1.0212, -0.5771,  0.1241],\n",

       "       [ 0.3026,  0.5238,  0.0009,  1.3438],\n",

       "       [-0.7135, -0.8312, -2.3702, -1.8608]])"

      ]

     },

     "execution_count": 45,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "cond = names == 'Bob'\n",

    "data[~cond]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 46,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 0.0929,  0.2817,  0.769 ,  1.2464],\n",

       "       [ 1.3529,  0.8864, -2.0016, -0.3718],\n",

       "       [ 1.669 , -0.4386, -0.5397,  0.477 ],\n",

       "       [ 3.2489, -1.0212, -0.5771,  0.1241]])"

      ]

     },

     "execution_count": 46,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "mask = (names == 'Bob') | (names == 'Will')\n",

    "mask\n",

    "data[mask]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 47,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[0.0929, 0.2817, 0.769 , 1.2464],\n",

       "       [1.0072, 0.    , 0.275 , 0.2289],\n",

       "       [1.3529, 0.8864, 0.    , 0.    ],\n",

       "       [1.669 , 0.    , 0.    , 0.477 ],\n",

       "       [3.2489, 0.    , 0.    , 0.1241],\n",

       "       [0.3026, 0.5238, 0.0009, 1.3438],\n",

       "       [0.    , 0.    , 0.    , 0.    ]])"

      ]

     },

     "execution_count": 47,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data[data < 0] = 0\n",

    "data"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 48,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[7.    , 7.    , 7.    , 7.    ],\n",

       "       [1.0072, 0.    , 0.275 , 0.2289],\n",

       "       [7.    , 7.    , 7.    , 7.    ],\n",

       "       [7.    , 7.    , 7.    , 7.    ],\n",

       "       [7.    , 7.    , 7.    , 7.    ],\n",

       "       [0.3026, 0.5238, 0.0009, 1.3438],\n",

       "       [0.    , 0.    , 0.    , 0.    ]])"

      ]

     },

     "execution_count": 48,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "data[names != 'Joe'] = 7\n",

    "data"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 49,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[0., 0., 0., 0.],\n",

       "       [1., 1., 1., 1.],\n",

       "       [2., 2., 2., 2.],\n",

       "       [3., 3., 3., 3.],\n",

       "       [4., 4., 4., 4.],\n",

       "       [5., 5., 5., 5.],\n",

       "       [6., 6., 6., 6.],\n",

       "       [7., 7., 7., 7.]])"

      ]

     },

     "execution_count": 49,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.empty((8, 4))\n",

    "for i in range(8):\n",

    "    arr[i] = i\n",

    "arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 50,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[4., 4., 4., 4.],\n",

       "       [3., 3., 3., 3.],\n",

       "       [0., 0., 0., 0.],\n",

       "       [6., 6., 6., 6.]])"

      ]

     },

     "execution_count": 50,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr[[4, 3, 0, 6]]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 51,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[5., 5., 5., 5.],\n",

       "       [3., 3., 3., 3.],\n",

       "       [1., 1., 1., 1.]])"

      ]

     },

     "execution_count": 51,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr[[-3, -5, -7]]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 52,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 4, 23, 29, 10])"

      ]

     },

     "execution_count": 52,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.arange(32).reshape((8, 4))\n",

    "arr\n",

    "arr[[1, 5, 7, 2], [0, 3, 1, 2]]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 53,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 4,  7,  5,  6],\n",

       "       [20, 23, 21, 22],\n",

       "       [28, 31, 29, 30],\n",

       "       [ 8, 11,  9, 10]])"

      ]

     },

     "execution_count": 53,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr[[1, 5, 7, 2]][:, [0, 3, 1, 2]]"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 54,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 0,  5, 10],\n",

       "       [ 1,  6, 11],\n",

       "       [ 2,  7, 12],\n",

       "       [ 3,  8, 13],\n",

       "       [ 4,  9, 14]])"

      ]

     },

     "execution_count": 54,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.arange(15).reshape((3, 5))\n",

    "arr\n",

    "arr.T"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 55,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 9.2291,  0.9394,  4.948 ],\n",

       "       [ 0.9394,  3.7662, -1.3622],\n",

       "       [ 4.948 , -1.3622,  4.3437]])"

      ]

     },

     "execution_count": 55,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.random.randn(6, 3)\n",

    "arr\n",

    "np.dot(arr.T, arr)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 56,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[[ 0,  1,  2,  3],\n",

       "        [ 8,  9, 10, 11]],\n",

       "\n",

       "       [[ 4,  5,  6,  7],\n",

       "        [12, 13, 14, 15]]])"

      ]

     },

     "execution_count": 56,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.arange(16).reshape((2, 2, 4))\n",

    "arr\n",

    "arr.transpose((1, 0, 2))"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 57,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[[ 0,  4],\n",

       "        [ 1,  5],\n",

       "        [ 2,  6],\n",

       "        [ 3,  7]],\n",

       "\n",

       "       [[ 8, 12],\n",

       "        [ 9, 13],\n",

       "        [10, 14],\n",

       "        [11, 15]]])"

      ]

     },

     "execution_count": 57,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr\n",

    "arr.swapaxes(1, 2)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 58,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([   1.    ,    2.7183,    7.3891,   20.0855,   54.5982,  148.4132,\n",

       "        403.4288, 1096.6332, 2980.958 , 8103.0839])"

      ]

     },

     "execution_count": 58,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.arange(10)\n",

    "arr\n",

    "np.sqrt(arr)\n",

    "np.exp(arr)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 59,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 0.8626,  1.0048,  1.3272,  0.6702,  0.853 ,  0.0222,  0.7584,\n",

       "       -0.6605])"

      ]

     },

     "execution_count": 59,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "x = np.random.randn(8)\n",

    "y = np.random.randn(8)\n",

    "x\n",

    "y\n",

    "np.maximum(x, y)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 60,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([-3., -6., -6.,  5.,  3.,  3.,  5.])"

      ]

     },

     "execution_count": 60,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.random.randn(7) * 5\n",

    "arr\n",

    "remainder, whole_part = np.modf(arr)\n",

    "remainder\n",

    "whole_part"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 61,

   "metadata": {},

   "outputs": [

    {

     "name": "stderr",

     "output_type": "stream",

     "text": [

      "F:\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:2: RuntimeWarning: invalid value encountered in sqrt\n",

      "  \n"

     ]

    },

    {

     "data": {

      "text/plain": [

       "array([-2.5154, -3.1114, -4.6058, -3.6311,  1.1145,  0.2566, -5.7886])"

      ]

     },

     "execution_count": 61,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.random.randn(7) * 5\n",

    "np.sqrt(arr)\n",

    "arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 62,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[-5.  , -5.  , -5.  , ..., -5.  , -5.  , -5.  ],\n",

       "       [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99],\n",

       "       [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98],\n",

       "       ...,\n",

       "       [ 4.97,  4.97,  4.97, ...,  4.97,  4.97,  4.97],\n",

       "       [ 4.98,  4.98,  4.98, ...,  4.98,  4.98,  4.98],\n",

       "       [ 4.99,  4.99,  4.99, ...,  4.99,  4.99,  4.99]])"

      ]

     },

     "execution_count": 62,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "points = np.arange(-5, 5, 0.01) # 1000 equally spaced points\n",

    "xs, ys = np.meshgrid(points, points)\n",

    "ys"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 63,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[7.0711, 7.064 , 7.0569, ..., 7.0499, 7.0569, 7.064 ],\n",

       "       [7.064 , 7.0569, 7.0499, ..., 7.0428, 7.0499, 7.0569],\n",

       "       [7.0569, 7.0499, 7.0428, ..., 7.0357, 7.0428, 7.0499],\n",

       "       ...,\n",

       "       [7.0499, 7.0428, 7.0357, ..., 7.0286, 7.0357, 7.0428],\n",

       "       [7.0569, 7.0499, 7.0428, ..., 7.0357, 7.0428, 7.0499],\n",

       "       [7.064 , 7.0569, 7.0499, ..., 7.0428, 7.0499, 7.0569]])"

      ]

     },

     "execution_count": 63,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "z = np.sqrt(xs ** 2 + ys ** 2)\n",

    "z"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 64,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "Text(0.5,1,'Image plot of $\\\\sqrt{x^2 + y^2}$ for a grid of values')"

      ]

     },

     "execution_count": 64,

     "metadata": {},

     "output_type": "execute_result"

    },

    {
      "text/plain": [

       "<Figure size 432x288 with 2 Axes>"

      ]

     },

     "metadata": {

      "needs_background": "light"

     },

     "output_type": "display_data"

    }

   ],

   "source": [

    "import matplotlib.pyplot as plt\n",

    "plt.imshow(z, cmap=plt.cm.gray); plt.colorbar()\n",

    "plt.title(\"Image plot of $\\sqrt{x^2 + y^2}$ for a grid of values\")"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 65,

   "metadata": {},

   "outputs": [],

   "source": [

    "xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])\n",

    "yarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])\n",

    "cond = np.array([True, False, True, True, False])"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 66,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "[1.1, 2.2, 1.3, 1.4, 2.5]"

      ]

     },

     "execution_count": 66,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "result = [(x if c else y)\n",

    "          for x, y, c in zip(xarr, yarr, cond)]\n",

    "result"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 67,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([1.1, 2.2, 1.3, 1.4, 2.5])"

      ]

     },

     "execution_count": 67,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "result = np.where(cond, xarr, yarr)\n",

    "result"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 68,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 2,  2,  2,  2],\n",

       "       [-2,  2, -2,  2],\n",

       "       [ 2,  2, -2,  2],\n",

       "       [ 2,  2,  2, -2]])"

      ]

     },

     "execution_count": 68,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.random.randn(4, 4)\n",

    "arr\n",

    "arr > 0\n",

    "np.where(arr > 0, 2, -2)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 69,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 2.    ,  2.    ,  2.    ,  2.    ],\n",

       "       [-0.9975,  2.    , -0.1316,  2.    ],\n",

       "       [ 2.    ,  2.    , -0.1149,  2.    ],\n",

       "       [ 2.    ,  2.    ,  2.    , -0.7485]])"

      ]

     },

     "execution_count": 69,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "np.where(arr > 0, 2, arr) # set only positive values to 2"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 70,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "-1.9117900069248925"

      ]

     },

     "execution_count": 70,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.random.randn(5, 4)\n",

    "arr\n",

    "arr.mean()\n",

    "np.mean(arr)\n",

    "arr.sum()"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 71,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 0.0965,  0.2588, -1.4873, -0.7798])"

      ]

     },

     "execution_count": 71,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr.mean(axis=1)\n",

    "arr.sum(axis=0)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 72,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 0,  1,  3,  6, 10, 15, 21, 28], dtype=int32)"

      ]

     },

     "execution_count": 72,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.array([0, 1, 2, 3, 4, 5, 6, 7])\n",

    "arr.cumsum()"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 73,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[  0,   0,   0],\n",

       "       [  3,  12,  60],\n",

       "       [  6,  42, 336]], dtype=int32)"

      ]

     },

     "execution_count": 73,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\n",

    "arr\n",

    "arr.cumsum(axis=0)\n",

    "arr.cumprod(axis=1)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 74,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "43"

      ]

     },

     "execution_count": 74,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.random.randn(100)\n",

    "(arr > 0).sum() # Number of positive values"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 75,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "False"

      ]

     },

     "execution_count": 75,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "bools = np.array([False, False, True, False])\n",

    "bools.any()\n",

    "bools.all()"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 76,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([-1.8245, -0.9616, -0.4457, -0.2555,  0.4684,  1.2636])"

      ]

     },

     "execution_count": 76,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.random.randn(6)\n",

    "arr\n",

    "arr.sort()\n",

    "arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 77,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 0.6254,  1.0229,  1.1074],\n",

       "       [-0.3501,  0.0909,  0.218 ],\n",

       "       [-1.7415, -1.0523, -0.8948],\n",

       "       [-2.4203, -0.5762,  1.4366],\n",

       "       [-1.0623,  0.001 ,  0.2374]])"

      ]

     },

     "execution_count": 77,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "arr = np.random.randn(5, 3)\n",

    "arr\n",

    "arr.sort(1)\n",

    "arr"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 78,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "-1.5308984278773312"

      ]

     },

     "execution_count": 78,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "large_arr = np.random.randn(1000)\n",

    "large_arr.sort()\n",

    "large_arr[int(0.05 * len(large_arr))] # 5% quantile"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 79,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([1, 2, 3, 4])"

      ]

     },

     "execution_count": 79,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\n",

    "np.unique(names)\n",

    "ints = np.array([3, 3, 3, 2, 2, 1, 1, 4, 4])\n",

    "np.unique(ints)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 80,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "['Bob', 'Joe', 'Will']"

      ]

     },

     "execution_count": 80,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "sorted(set(names))"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 81,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ True, False, False,  True,  True, False,  True])"

      ]

     },

     "execution_count": 81,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "values = np.array([6, 0, 0, 3, 2, 5, 6])\n",

    "np.in1d(values, [2, 3, 6])"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 82,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 28.,  64.],\n",

       "       [ 67., 181.]])"

      ]

     },

     "execution_count": 82,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "x = np.array([[1., 2., 3.], [4., 5., 6.]])\n",

    "y = np.array([[6., 23.], [-1, 7], [8, 9]])\n",

    "x\n",

    "y\n",

    "x.dot(y)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 83,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[ 28.,  64.],\n",

       "       [ 67., 181.]])"

      ]

     },

     "execution_count": 83,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "np.dot(x, y)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 84,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 6., 15.])"

      ]

     },

     "execution_count": 84,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "np.dot(x, np.ones(3))"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 85,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 6., 15.])"

      ]

     },

     "execution_count": 85,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "x @ np.ones(3)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 86,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[-0.9722, -0.8684, -0.7662, -0.1833,  0.4097],\n",

       "       [ 0.    , -6.2417, -3.5852,  0.4809, -4.253 ],\n",

       "       [ 0.    ,  0.    , -0.8245,  1.8971, -3.9035],\n",

       "       [ 0.    ,  0.    ,  0.    , -0.9413,  1.4632],\n",

       "       [ 0.    ,  0.    ,  0.    ,  0.    ,  0.1324]])"

      ]

     },

     "execution_count": 86,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "from numpy.linalg import inv, qr\n",

    "X = np.random.randn(5, 5)\n",

    "mat = X.T.dot(X)\n",

    "inv(mat)\n",

    "mat.dot(inv(mat))\n",

    "q, r = qr(mat)\n",

    "r"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 87,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[-1.237 , -0.5367,  1.8545, -0.92  ],\n",

       "       [-0.1082,  0.1525,  0.9435, -1.0953],\n",

       "       [-0.144 ,  1.9562, -0.2912,  0.1048],\n",

       "       [ 0.1396, -0.2841, -0.7082,  2.4632]])"

      ]

     },

     "execution_count": 87,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "samples = np.random.normal(size=(4, 4))\n",

    "samples"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 88,

   "metadata": {},

   "outputs": [

    {

     "name": "stdout",

     "output_type": "stream",

     "text": [

      "948 ms ± 21.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n",

      "34.6 ms ± 198 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"

     ]

    }

   ],

   "source": [

    "from random import normalvariate\n",

    "N = 1000000\n",

    "%timeit samples = [normalvariate(0, 1) for _ in range(N)]\n",

    "%timeit np.random.normal(size=N)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 89,

   "metadata": {},

   "outputs": [],

   "source": [

    "np.random.seed(1234)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 90,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([ 0.4714, -1.191 ,  1.4327, -0.3127, -0.7206,  0.8872,  0.8596,\n",

       "       -0.6365,  0.0157, -2.2427])"

      ]

     },

     "execution_count": 90,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "rng = np.random.RandomState(1234)\n",

    "rng.randn(10)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 91,

   "metadata": {},

   "outputs": [],

   "source": [

    "import random\n",

    "position = 0\n",

    "walk = [position]\n",

    "steps = 1000\n",

    "for i in range(steps):\n",

    "    step = 1 if random.randint(0, 1) else -1\n",

    "    position += step\n",

    "    walk.append(position)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 92,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "[<matplotlib.lines.Line2D at 0x18c1e247438>]"

      ]

     },

     "execution_count": 92,

     "metadata": {},

     "output_type": "execute_result"

    },

    {

     "data": {

     x2v4Ws53uuM3lOd783s/jvZ+63vPYEUWFy8FwYTZQGVNIQDKTx63txuvS24Fzjrf+/hfx7o+v9PQ6QOn/Z8kgm+sJvwehMV/dVFZkXfPAN6J2QAwePV0ljLFPMsZerPPnMQA/CeAdnPNTAN4B4AP1XoNz/gTn/Arn/Mr09HQv4RwLvnFxCp/7+dfhcsj+XYNKzVDaE/zbO3HsJTJ4/u5ez2PLURWLMwF4XZXeMM3SG52gHCSxrib7E6ui4szkKII+d8+v1QgpVNt6Uq8dXKaCLdEmPQk+5/wNnPMH6vx5CsDbATxZeOpfAhj6oi2g5aGNakHXbyYDXswJ9WeW9ShvVNKrq2Ujb5jFmQDcTtZz4VaPtdzBtJfXChvsUhkWBdzYileky4yuHRCDh5H3gVEA31z4+fUAer/PJ0ynkyKpLsJqMov7+0ddj7lzmMKGmqqbE/e4HFic6b1wq8eayvaWHjpMZXF7J2H4skhJFJDLc7xU5mBKBVuiU4wU/H8F4L8zxr4K4L8CeNzAsQiDkEICbmwdtlWIjSja5iPt5+43R+m/20jIJLE2vdH5GKVYe7lbWFk3R3Tr7UHQ/w+WSPCJNjFM8DnnX+Ccfx3n/EHO+ddzzp81aizCOCRxDNk8x+pm6wbiclTFty7NgLHeNke1au4uhQRsxlLY6sEbX1ZUvPbCNDxOR0+CX5xlGzzDPzUxikCVg6msqFiY1I4TRDtQaZ9oSru7W7diKWzGUriycAJnJ/1F0e4GOaoiNObDhN9TP6YeC7exZAZ3dhJ46NQYLswGevxyUjE+6oY45uv6NdpBczANVnw5yVH7Oq4S9oQEn2jKmROjGPU4W86CI2Xr5sNNrADaQS544DdCF/xux9C9eKSQAEkUeioy6wVbM3xswqKAiBJDPs+LtQOji8XEYEGCTzSl6I3fYhZcvlFKEgXc2z2Cmsx0PF4yk8ONrXjTmevYqBsnx0e6npnrvxcWBYQLDqbdpIeyuTyW12OmzbIlUcBhKot7e4lS7YBm+EQHkOATLdG98ZvNgiOKipPjIxgbdRdn4MtdFG6vbxwil29tHR3uoXAbUVRMjLoxJ/g6ahReze2dOFJZ83xsytNrZtUOiMGCBJ9oiSSOIZbKYm2v8VJLOVpKw5SEqfM8fru+8p2sHqodo9SKsJ0GI424ZrLoXpzVDPdkRYVc9qVFEO1Cgk+0RBe0aw1SKFoapmTROxP0YtLv6UpE5agKv8eJUxOjzWMSg8hzrStWJxTTMAWhHxtxY36iu/SQrKhwOxnOTwdaP7kP+NxOnJvyI6KoxS9Y8sAnOoEEn2jJpdkgHKzxLHhlPYY810QY0HYTN/Nwb4ZesHW0sI4u+vx0OMbN7TjS2cpWhN3275WjKi7MBIvr+c1ACgl44f4BVjZitOGK6BgSfKIlIx4nzk037rpUWqFT8geSRAEvbRwi04FtQT7PEVHaK4LOT4wgWLUuvR3qOVtKooBb2523Tmw31n6ie+MnM3nK3xMdQ4JPtIXUZKWOrKgIekutCAFNUNPZPG5utW9bsLZ3hMNUtq2Za7urh2pijarwOB0VaRi9dWIn6aHNWBLbhynTZ9kVX1Qk+ESHkOATbREWBdzfP8JBonappZ5PLk/DlIqh7RduW+2wrY1JWz2U78AbX1ZUXJwLwF1mJ9zNuv7ypZ1moo9X/aVFEO1Agk+0RbFwWyXgWhpGLVop65yb8sPjcuDa/c5E1MGAS236ykshAfF0Dnd2E209X7cTrt6sND8xgqDPVbco/eFn1/A/PnejNtYGDVqMZirgxUzQiwuzlV9aBNEOdMUQbVGyM6hMe9zdTSCeztXMdF1OB5bmgoisdyD4iopz0wH43M7WT0apZtBuHn8zlsJOPF0Tq748s97r/MkXb+H9n7tRswdBjpb2HZjNz77hIn7im8+bPi5x/CHBJ9piOujFdNBbI4r643oNXaSCFUC7tgURJdZRM48LswE4HaxtwZeLsdaOIYkCVtZjFa0TM7k8rm8cYj+RwbqarIrVOh+bf/H1p/GdD4YsGZs43pDgE21Tr3ArKyqcdVoRAlrKZTeexoba2rZgP5HG/f2jjlIkPrcTi9Ptm58V8+71BD8kIJHO4c5Oqch8Y+sQ6cIqo/IxEuksbm7HaVkkcewgwSfaJiwKuL4ZQzpbWmopR1Wcn/bXTcN0UrjVZ9+dFkGrHSRbjTE/MQKhTivCeoXbcpEv/3llPQbOzS/YEkSvkOATbSOFBGRyld74jVoRAqWm3u3MwLtd9SKFBCgHSezG0y2fG4k2jnVxJgCXg9WIvMfl0HbiVvnQA/VTQwRhZ0jwibap9qHfjaehHCQb5rKDPjfOTI621f0qosQwU6gTdBZTe4XbRDqLWzuNXTh9bicWZyo3l0XWVSzNBfGyk2OVx+vsOyCI4wAJPtE2Z6f88LlLHaLq7bCtRmrTtkDusgiqLwdtdRexXEjDNMu7l8eqL+HU7Z5v7yRwmMoWxwqHyMeGOH6Q4BNt43QwXJorFW4jxbx743XzYVHA7Z14USzrkc7msboZ6yonPhnwYlaoXT1UTTspo3DBtmD7MIV1NYm9REZrkhLS7Z5V5PK8wnyNII4TJPhER+izYH0GPCt4MRlonIaRRN22oLEgX9+MIZNr7YHfKqZmyIqKoK95GkYXdt2NEig1SdFf485OHIl0jgSfOJaQ4BMdIYUEHBxloBwkmxZsy58PNE+59NrMQwoJWN1s7o2vp2eapWHCZTUK/Y5haS4IccyH8VF34XipPSJBHDdI8ImO0AX++bv7WN08bCl8uljKTQq3ESWGEbcTC5P+LmMaQzZfuXqonFyeY6WNVoQn/B6IYz6to5Si4szkKII+t2b3XNiDICsHcDkYFmfIx4Y4fpDgEx2xNBcEY8BTX7mPbJ43LdgCKIllk5SLrBxgSdS6OXVDq7uI2ztxHGXaS8PoscpVSzglUcDyegxfWzvA4kz79g8EYSdI8ImO8HtdWJj04zMrmwCaF2x1wqKAZUVFto43ftHQrIec+JkToxj1OBt+qXSyxj8saumh2zuJmiYpqWwe/3BjhzZcEceWngSfMfbPGGPXGGN5xtiVqn97J2NslTG2whh7U29hEnZCErUNWKMeJ860kYaRCmJ5e6fWG//+/hHUZHse+I1wOBiW5hrvuJUVFa4G9g81sYYE6HY6FTP8wl1Eto0G6wRhV3qd4b8I4HsAfL78IGNMAvA2AJcBPArgDxhjdA88IOjitzTXXhqmmHKpk8fvVxFUCgmIRNW6Rm0RRcXiTABeV+tLsJ7IA8D56QA8BTtiKtgSx5WeBJ9zHuGcr9T5p8cAfJBznuKc3wKwCuCVvYxF2AddFNsVPl0s6+XY5agKxko2DN3HNIZYKou1vaO6Y7Qb6+kTo/B7nBgfdUMc8xWPe1yO4h0CpXSI44rLoNc9CeDLZY/XCsdqYIw9DuBxADh9+rRB4RD95IGTY/C4HHhk4URbz/e4HFicCeBatNZETVYOcHbSj1FPb5eiXku4Fj3AqROjxePbhylsxtpvRehwMHzdwgl4nI6aJZyPLJxAMpPDCb+np1gJwipafsoYY58EMFfnn97FOX+q0a/VOVbXFJ1z/gSAJwDgypUr7feqIyxjOujFl37p9ZjsQPikkIDPrmzVHJcVFS+fH+85pqU5AQ6mpY0efUAsvb6+xr+DWfn7f/Bh1Fuu/863LOHnshd7jpUgrKKl4HPO39DF664BOFX2eB5AtIvXIWzKVJPdtfWQRAEffnYNm7EkZoJaqkRNZnBv9whve6T3O7sRjxNnp/wNG7R0kobxe+t/LLwuZ1t1AIKwK0Yty/wogLcxxryMsbMALgD4R4PGIo4BJduCUuF2uc+7VqXQWN0GLaExHyYoDUMQPS/L/G7G2BqAVwP4W8bY3wEA5/wagA8BkAF8HMBPcc4b73snBp6iH02F37yW07/cpyKoJAq4v3+Eg0SmbAzrWhEShN3odZXOX3HO5znnXs75LOf8TWX/9uuc8/Oc80uc84/1HipxnBkbcePkeG0jkUm/p2MP/EYUrZILYyQzOdzYOqRVNQRRgHbaEqYhhYTirB7Q0jtSH33ly90uAeCljRjyLTzwCWKYIMEnTEMSBdzcjiORziKTy2Nlo7++8jNBH6YC3uIMv1cXToIYNIxah08QNUgh3Rs/hlGPC+lsvu9irN1FFARfURHwunBqYrTFbxHEcEAzfMI0Sj1xY5AVLbXT7/x6WAzi+mYM6WweclTrSevo0oWTIAYNEnzCNOYnRhD0uiArB4goMXhcDpyb6s4DvxG6sdv1zZjWipDSOQRRhFI6hGkwxhAupFxGPS4szQXhcvZ3znG5IPB/d20Dh6neXDgJYtCgGT5hKpIoIKLEcC16YIgYn50KwOd24CPPrmnj0QyfIIqQ4BOmIoUEHGVy2EtkDBFjp4Ph0py2AcvpYLg425sLJ0EMEiT4hKlIVV2kjBlDE/lzU35qRUgQZZDgE6ayOBOAq7BqplcP/EZ06tdPEMMCFW0JU/G5nVicCeAok0PQ5zZkDF3oqWBLEJWQ4BOm8443XkQ6W9vQvF+8fH4c//qbz+Gxh+r23CGIoYUEnzCdN12u10+nf7idDrzzzWFDxyCI4wjl8AmCIIYEEnyCIIghgQSfIAhiSCDBJwiCGBJI8AmCIIYEEnyCIIghgQSfIAhiSCDBJwiCGBIY59zqGIowxrYA3Ony16cAbPcxnOPCML7vYXzPwHC+72F8z0Dn7/sM53y61ZNsJfi9wBi7yjm/YnUcZjOM73sY3zMwnO97GN8zYNz7ppQOQRDEkECCTxAEMSQMkuA/YXUAFjGM73sY3zMwnO97GN8zYND7HpgcPkEQBNGcQZrhEwRBEE0YCMFnjD3KGFthjK0yxn7J6niMgDF2ijH2GcZYhDF2jTH2M4XjJxhjTzPGrhf+nrA6ViNgjDkZY88zxv6m8PgsY+yZwvv+v4wxj9Ux9hPG2Dhj7MOMseXCOX/1MJxrxtg7Ctf3i4yxv2CM+QbxXDPG/pgxtskYe7HsWN3zyzR+r6BvX2OMPdztuMde8BljTgDvA/BmABKAH2CMSdZGZQhZAP+ecx4G8CoAP1V4n78E4FOc8wsAPlV4PIj8DIBI2ePfBPA7hfe9B+DHLYnKON4L4OOc8yUAD0J77wN9rhljJwH8OwBXOOcPAHACeBsG81z/KYBHq441Or9vBnCh8OdxAO/vdtBjL/gAXglglXN+k3OeBvBBAI9ZHFPf4ZwrnPPnCj/HoAnASWjv9c8KT/szAN9lTYTGwRibB/DtAP6o8JgBeD2ADxeeMlDvmzEmAHgtgA8AAOc8zTnfxxCca2hd+EYYYy4AowAUDOC55px/HsBu1eFG5/cxAP+Ta3wZwDhjTOxm3EEQ/JMA7pU9XiscG1gYYwsAXgHgGQCznHMF0L4UAMxYF5lh/C6AXwCgN8KdBLDPOc8WHg/aOT8HYAvAnxTSWH/EGPNjwM815/w+gPcAuAtN6A8APIvBPtflNDq/fdO4QRB8VufYwC49YowFAHwEwM9yzlWr4zEaxth3ANjknD9bfrjOUwfpnLsAPAzg/ZzzVwCIY8DSN/Uo5KwfA3AWQAiAH1o6o5pBOtft0LfrfRAEfw3AqbLH8wCiFsViKIwxNzSx/3PO+ZOFwxv67V3h702r4jOIbwDwVsbYbWjputdDm/GPF277gcE752sA1jjnzxQefxjaF8Cgn+s3ALjFOd/inGcAPAngNRjsc11Oo/PbN40bBMH/JwAXCpV8D7Qiz0ctjqnvFPLWHwAQ4Zz/dtk/fRTA2ws/vx3AU2bHZiSc83dyzuc55wvQzu2nOec/COAzAL6v8LSBet+c83UA9xhjlwqHvhWAjAE/19BSOa9ijI0Wrnf9fQ/sua6i0fn9KIAfKazWeRWAAz310zGc82P/B8BbALwE4AaAd1kdj0Hv8Ruh3cZ9DcBXCn/eAi2f/SkA1wt/n7A6VgP/D14H4G8KP58D8I8AVgH8JQCv1fH1+b0+BOBq4Xz/NYCJYTjXAP4zgGUALwL4XwC8g3iuAfwFtDpFBtoM/scbnV9oKZ33FfTtBWirmLoal3baEgRBDAmDkNIhCIIg2oAEnyAIYkggwScIghgSSPAJgiCGBBJ8giCIIYEEnyAIYkggwScIghgSSPAJgiCGhP8PuQtcyU8AXYYAAAAASUVORK5CYII=\n",

      "text/plain": [

       "<Figure size 432x288 with 1 Axes>"

      ]

     },

     "metadata": {

      "needs_background": "light"

     },

     "output_type": "display_data"

    }

   ],

   "source": [

    "plt.plot(walk[:100])"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 93,

   "metadata": {},

   "outputs": [],

   "source": [

    "np.random.seed(12345)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 94,

   "metadata": {},

   "outputs": [],

   "source": [

    "nsteps = 1000\n",

    "draws = np.random.randint(0, 2, size=nsteps)\n",

    "steps = np.where(draws > 0, 1, -1)\n",

    "walk = steps.cumsum()"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 95,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "31"

      ]

     },

     "execution_count": 95,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "walk.min()\n",

    "walk.max()"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 96,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "37"

      ]

     },

     "execution_count": 96,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "(np.abs(walk) >= 10).argmax()"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 97,

   "metadata": {},

   "outputs": [

    {

     "data": {

      "text/plain": [

       "array([[  1,   0,   1, ...,   8,   7,   8],\n",

       "       [  1,   0,  -1, ...,  34,  33,  32],\n",

       "       [  1,   0,  -1, ...,   4,   5,   4],\n",

       "       ...,\n",

       "       [  1,   2,   1, ...,  24,  25,  26],\n",

       "       [  1,   2,   3, ...,  14,  13,  14],\n",

       "       [ -1,  -2,  -3, ..., -24, -23, -22]], dtype=int32)"

      ]

     },

     "execution_count": 97,

     "metadata": {},

     "output_type": "execute_result"

    }

   ],

   "source": [

    "nwalks = 5000\n",

    "nsteps = 1000\n",

    "draws = np.random.randint(0, 2, size=(nwalks, nsteps)) # 0 or 1\n",

    "steps = np.where(draws > 0, 1, -1)\n",

    "walks = steps.cumsum(1)\n",

    "walks"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": null,

   "metadata": {},

   "outputs": [],

   "source": []

  }

 ],

 "metadata": {

  "kernelspec": {

   "display_name": "Python 3",

   "language": "python",

   "name": "python3"

  },

  "language_info": {

   "codemirror_mode": {

    "name": "ipython",

    "version": 3

   },

   "file_extension": ".py",

   "mimetype": "text/x-python",

   "name": "python",

   "nbconvert_exporter": "python",

   "pygments_lexer": "ipython3",

   "version": "3.7.0"

  }

 },

 "nbformat": 4,

 "nbformat_minor": 2

}
